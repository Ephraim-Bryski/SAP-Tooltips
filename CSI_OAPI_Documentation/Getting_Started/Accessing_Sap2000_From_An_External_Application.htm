
<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="Originator" content="ImportDoc">
<meta name="OriginalFile" content="F:\Documents and Settings\Nancy\My Documents\SharedFiles\API\API FrontStuff\Revised stuff\Accessing Sap2000 From An External Application.doc">
<meta name="topic-status" content="In Progress">
<meta name="topic-priority" content="0">
<meta name="topic-time-estimate" content="0">
<meta name="topic-id" content="">
 <meta name="generator" content="Adobe RoboHelp 2019">
<title>Accessing Sap2000 From An External Application</title>
<link rel="StyleSheet" href="../SAP2000.CSS" type="text/css">
</head>
<body lang="EN-US" xml:lang="EN-US">
<script type="text/javascript" src="../ehlpdhtm.js"></script>

<h1>Accessing Sap2000 From An External Application</h1>
<p class="IntroText">This page contains an outline for connecting to the SAP2000 API, with VBA code examples. For specific instructions for supported programming languages, please refer to the Example Code section.</p>
<p class="IntroText">The first step in using the CSi API from an external application is to reference SAP2000v1.DLL or SAP2000v1.TLB from your application. If using Excel VBA, reference SAP2000v1.TLB by opening the VBA editor, clicking the <span style="font-family: Verdana, sans-serif; font-weight: bold; font-size: 8pt;">Tools menu &gt; References</span> command and selecting SAP2000v1.TLB from the program installation folder.</p>
<p class="IntroText">Next, within your application, you will create a variable of interface type cOAPI, and an instance of the Sap2000 object which implements cOAPI. In VBA this could be accomplished as:</p>
<p class="Coding">Dim mySapObject As SAP2000v1.cOAPI</p>
<p class="Coding" style="margin-left: .5in;">Dim myHelper As SAP2000v1.cHelper</p>
<p class="Coding" style="margin-left: .5in;">Set myHelper = New SAP2000v1.Helper<br>
Set mySapObject = myHelper.CreateObject(ProgramPath)<br>
&#160;</p>
<p class="IntroText">The first line creates the interface variable, the second and third lines create a helper class, and the fourth line creates the instance of the Sap2000 object which implements the interface by passing in the path to where the Sap2000.exe program is located. Now that an instance of the Sap2000 object has been created in your application, start SAP2000 using the following VBA command:</p>
<p class="Coding">SapObject.ApplicationStart<br>
&#160;</p>
<p class="IntroText">At this point you can open an existing model, or create a new one and perform whatever actions are required. In general, the API commands are accessed through SapObject.SapModel.</p>
<p class="IntroText">It may be helpful to define a SapModel variable so that the API commands are accessed through SapModel instead of SapObject.SapModel. In VBA this could be accomplished as:</p>
<p class="Coding">Dim mySapModel As cSapModel<span style="margin-left: .5in;"><br>
Set mySapModel= mySapObject.SapModel<br>
&#160;</span></p>
<p class="IntroText">When finished with a model, you may want to close the SAP2000 application. This can be accomplished using the following VBA command:</p>
<p class="Coding">SapObject.ApplicationExit&#160;&#160;True<br>
&#160;</p>
<p class="IntroText">As a last step, the SapModel and SapObject variables should always be set to Nothing. In VBA this is accomplished as:</p>
<p class="Coding">Set SapModel= Nothing<span style="margin-top: 0in; margin-right: 0in; margin-bottom: .0001pt; margin-left: .5in;"><br>
Set SapObject= Nothing<br>
&#160;</span></p>
<p class="IntroText">Setting the variables to Nothing is a very important step. It breaks the connection between your application and SAP2000 and frees up system resources. If the variables are not set to Nothing, the SAP2000 application may not completely close (you may still see it running in your Windows Task Manager).</p>
<p class="IntroText">Putting all the steps previously described into a single example, a VBA program might consist of the following:</p>
<p class="Coding">Sub MyProgram<br>
&#160;&#160;&#160;'dimension variables<br>
&#160;&#160;&#160;&#160;&#160;&#160;Dim mySapObject As SAP2000v1.cOAPI</p>
<p class="Coding">&#160;&#160;&#160;&#160;&#160;&#160;Dim myHelper As SAP2000v1.cHelper<br>
&#160;&#160;&#160;&#160;&#160;&#160;Dim mySapModel As cSapModel<br>
&#160;&#160;&#160;&#160;&#160;&#160;Dim ret As Long<br>
<br>
&#160;&#160;&#160;'create an instance of the Sap2000 object</p>
<p class="Coding">&#160;&#160;&#160;&#160;&#160;&#160;Set myHelper= New SAP2000v1.Helper<br>
&#160;&#160;&#160;&#160;&#160;&#160;Set mySapObject= myHelper.CreateObject("C:\Program Files (x86)\Computers and Structures\SAP2000 21\sap2000.exe")<br>
<br>
&#160;&#160;&#160;'start the Sap2000 application<br>
&#160;&#160;&#160;&#160;&#160;&#160;mySapObject.ApplicationStart<br>
<br>
&#160;&#160;&#160;'create the SapModel object<br>
&#160;&#160;&#160;&#160;&#160;&#160;Set mySapModel= mySapObject.SapModel<br>
<br>
&#160;&#160;&#160;'initialize model<br>
&#160;&#160;&#160;&#160;&#160;&#160;ret = mySapModel.InitializeNewModel<br>
<br>
&#160;&#160;&#160;'call Sap2000 API functions here to perform desired tasks<br>
&#160;&#160;&#160;'in this example a new 2D frame is created from template<br>
&#160;&#160;&#160;&#160;&#160;&#160;ret = mySapModel.File.New2DFrame(PortalFrame, 3, 124, 3, 200)<br>
<br>
&#160;&#160;&#160;'close the Sap2000 application, if desired<br>
&#160;&#160;&#160;&#160;&#160;&#160;mySapObject.ApplicationExit False<br>
<br>
&#160;&#160;&#160;'set the objects to Nothing<br>
&#160;&#160;&#160;'at the end of your program ALWAYS terminate the objects in this manner<br>
&#160;&#160;&#160;&#160;&#160;&#160;Set mySapModel= Nothing<br>
&#160;&#160;&#160;&#160;&#160;&#160;Set mySapObject= Nothing<br>
End Sub</p>
<p class="Coding">&#160;</p>
<p class="IntroText" style="font-weight: bold; margin-bottom: 0pt;"><span><span style="font-weight: bold;">See Also</span></span></p>
<p class="Block-Text" style="margin-left: 24px;"><a href="../Introduction.htm">Introduction</a></p>
<p class="Block-Text" style="margin-left: 24px;"><a href="Function_Documentation_Conventions.htm">Function Documentation Conventions</a></p>
<p class="Block-Text" style="margin-left: 24px;"><a href="Function_Return_Values.htm">Function Return Values</a></p>
<p class="Block-Text" style="margin-left: 24px;"><a href="Units_Abbreviations.htm">Units Abbreviations</a></p>
<p class="Block-Text" style="margin-left: 24px;"><a href="Visual_Basic_Concepts_Used_In_The_Sap2000_API.htm">Visual Basic Concepts Used in the CSi OAPI</a></p>
</body>
</html>
