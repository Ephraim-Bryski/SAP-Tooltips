
<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
 <meta name="generator" content="Adobe RoboHelp 2019">
<title>GetCurved_1</title>
<link rel="StyleSheet" href="../../../SAP2000.CSS" type="text/css">
</head>
<body><a name="642b3b9347ca42c9b00b820c00c373fa=1"></a>
<script type="text/javascript" src="../../../ehlpdhtm.js" language="JavaScript1.2"></script>

<h1>GetCurved_1</h1>
<h2>Syntax</h2>
<p class="Comment">SapObject.SapModel.FrameObj.GetCurved_1</p>
<h2>VB6 Procedure</h2>
<p class="Comment">Function GetCurved_1(ByRef NumberItems As Integer, ByRef MyName As String(), ByRef MyType() As Integer, ByRef gx() As Double, ByRef gy() As Double, ByRef gz() As Double, ByRef PointName() As String, ByRef Radius() As Double, ByRef NumSegs() As Integer) As Long</p>
<h2>Parameters</h2>
<p class="ParameterName">NumberItems</p>
<p class="Comment">The number of curved frame objects returned.</p>
<p class="ParameterName">MyName</p>
<p class="Comment">This is a one-dimensional array of frame object names. The MyName array is created as a dynamic, zero-based, array by the APIuser:</p>
<p class="Comment" style="margin-left: 88px;">Dim MyName() as String</p>
<p class="Comment" style="margin-left: 88px;">The array is dimensioned to (NumberNames – 1) inside the Sap2000 program, filled with the names, and returned to the APIuser</p>
<p class="ParameterName">MyType</p>
<p class="Comment">This is an array that includes a numeric value indicating the curved frame type. The type is 1, 2, 3, 4, or 5.</p>
<p class="Block-Text" style="margin-left: 85px;">1 = Circular Arc Specified by a Third Point Name</p>
<p class="Block-Text" style="margin-left: 85px;">2 = Circular Arc Specified by Third Point Coordinates</p>
<p class="Block-Text" style="margin-left: 85px;">3 = Circular Arc Specified by Planar Point Coordinates and Radius</p>
<p class="Block-Text" style="margin-left: 85px;">4 = Parabolic Arc Specified by a Third Point Name</p>
<p class="Block-Text" style="margin-left: 85px;">5 = Parabolic Arc Specified by Third Point Coordinates</p>
<p class="ParameterDescription" style="margin-top: 0in; margin-right: 0in; margin-bottom: .0001pt; margin-left: .5in;">&#160;</p>
<p class="Comment">MyTypes 1, 2, 4, and 5 all define the curve by three points. The three points are the two end point of the frame object and a third point defined by naming an existing point object or specifying point coordinates.</p>
<p class="Comment">MyType 3 defines a circular curved frame by it end points, the coordinates of another point that lies in the plane of the curve but not necessarily on the curved frame, and a curve radius.</p>
<p class="ParameterName">gx, gy, gz</p>
<p class="Comment">These are arrays that include the point coordinates in the global coordinate system. [L]</p>
<p class="Comment">For MyType 1 and 4 these items do not apply.</p>
<p class="Comment">For MyType 2 and 5 these are the coordinates of the third point on the curved frame.</p>
<p class="Comment">For MyType 3 these are the coordinates of the planar point that lies in the plane of the curved frame.</p>
<p class="ParameterName">PointName</p>
<p class="Comment">This is an array that includes the name of the point object that is the third point on the curved frame. This item applies for MyType 1 and 4. It does not apply for MyType 2, 3 and 5.</p>
<p class="ParameterName">Radius</p>
<p class="Comment">This is an array of the radii of the circular curved frame. This item only applies for MyType 3. [L]</p>
<p class="ParameterName">NumSegs</p>
<p class="Comment">This is an array that includes the number of segments into which the program internally divides the curved frame.</p>
<h2>Remarks</h2>
<p class="Comment">This function retrieves definition data for all curved frame objects and returns the data in arrays.</p>
<p class="Comment">The function returns zero if the curved frame object data is successfully retrieved, otherwise it returns a nonzero value.</p>
<h2>VBA Example</h2>
<p class="Coding">Sub GetCurvedFrames()<br>
&#160;&#160;&#160;'dimension variables<br>
&#160;&#160;&#160;&#160;&#160;&#160;Dim SapObject as cOAPI<br>
&#160;&#160;&#160;&#160;&#160;&#160;Dim SapModel As cSapModel<br>
&#160;&#160;&#160;&#160;&#160;&#160;Dim ret As Long<br>
&#160;&#160;&#160;&#160;&#160;&#160;Dim NumberItems As Long<br>
&#160;&#160;&#160;&#160;&#160;&#160;Dim MyName() As String</p>
<p class="Coding">&#160;&#160;&#160;&#160;&#160;&#160;Dim MyType() As Long<br>
&#160;&#160;&#160;&#160;&#160;&#160;Dim gx() As Double<br>
&#160;&#160;&#160;&#160;&#160;&#160;Dim gy() As Double<br>
&#160;&#160;&#160;&#160;&#160;&#160;Dim gz() As Double<br>
&#160;&#160;&#160;&#160;&#160;&#160;Dim PointName() As String<br>
&#160;&#160;&#160;&#160;&#160;&#160;Dim Radius() As Double<br>
&#160;&#160;&#160;&#160;&#160;&#160;Dim NumSegs() As Long<br>
<br>
&#160;&#160;&#160;'create Sap2000 object<br>
&#160;&#160;&#160;&#160;&#160;&#160;Set SapObject = CreateObject("CSI.SAP2000.API.SapObject")<br>
<br>
&#160;&#160;&#160;'start Sap2000 application<br>
&#160;&#160;&#160;&#160;&#160;&#160;SapObject.ApplicationStart<br>
<br>
&#160;&#160;&#160;'create SapModel object<br>
&#160;&#160;&#160;&#160;&#160;&#160;Set SapModel = SapObject.SapModel<br>
<br>
&#160;&#160;&#160;'initialize model<br>
&#160;&#160;&#160;&#160;&#160;&#160;ret = SapModel.InitializeNewModel<br>
<br>
&#160;&#160;&#160;'create model from template<br>
&#160;&#160;&#160;&#160;&#160;&#160;ret = SapModel.File.New2DFrame(PortalFrame, 3, 124, 3, 200)<br>
<br>
&#160;&#160;&#160;'set frames curved<br>
&#160;&#160;&#160;&#160;&#160;&#160;ret = SapModel.FrameObj.SetCurved("13", 1, 0, 0, 0, "1", 0, 16)<br>
&#160;&#160;&#160;&#160;&#160;&#160;ret = SapModel.FrameObj.SetCurved("14", 2, -200, 0, 176, "", 0, 16)<br>
&#160;&#160;&#160;&#160;&#160;&#160;ret = SapModel.FrameObj.SetCurved("15", 3, 0, 0, 0, "", 100, 16)<br>
&#160;&#160;&#160;&#160;&#160;&#160;ret = SapModel.FrameObj.SetCurved("16", 4, 0, 0, 0, "3", 0, 16)<br>
&#160;&#160;&#160;&#160;&#160;&#160;ret = SapModel.FrameObj.SetCurved("17", 5, 0, 0, 176, "", 0, 16)<br>
<br>
&#160;&#160;&#160;'get curved frame data<br>
&#160;&#160;&#160;&#160;&#160;&#160;ret = SapModel.FrameObj.GetCurved_1(NumberItems, MyName, MyType, gx, gy, gz, PointName, Radius, NumSegs)<br>
<br>
&#160;&#160;&#160;'close Sap2000<br>
&#160;&#160;&#160;&#160;&#160;&#160;SapObject.ApplicationExit False<br>
&#160;&#160;&#160;&#160;&#160;&#160;Set SapModel = Nothing<br>
&#160;&#160;&#160;&#160;&#160;&#160;Set SapObject = Nothing<br>
End Sub</p>
<h2>Release Notes</h2>
<p class="Comment">Initial release in version 17.2.0.</p>
<p class="Comment">This function supersedes <a href="../../Obsolete_Functions/GetCurved.htm">GetCurved</a>.</p>
<h2>See Also</h2>
<p class="Block-Text"><a href="SetStraight.htm">SetStraight</a></p>
<p class="Block-Text"><a href="SetCurved.htm">SetCurved</a></p>
<p class="Block-Text"><a href="GetType_{Frame_Object}.htm">GetType</a></p>
</body>
</html>
